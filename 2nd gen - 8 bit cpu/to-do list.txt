Things to do as of september, 26th, 2017:

Logisim project:
-ret_addr register		OK
-more flags (Carry, etc)		OK
-input device (keyboard)		OK
-magnitude comparison instructions	OK
-implement "DO NOTHING WITH A" or "RETURN A" ALU operation (S0 to S3 = L, M = L, C = H), useful to set flags without change register		OK

--------------------------------

oct, 30th:

-16 bit addressing (64k total memory - first 32k EEPROM, last 32K SRAM)
-15 bit direct mode for LD and ST instructions (first bit fixed to 1 - RAM)
-ADC and SBC instructions						(optional)
-SHL (shift left) instruction						OK
-ALU operations with imediate mode (e.g. ADD A, 47)			(optional)

-----------------------------

nov, 23th:
-RET Z and RET C instructions	(optional)
-N flag				(optional)
-limit ST instructions to 2nd half of 16 bit addr space (RAM) to avoid unintentional data loss of EEPROM
-HALT instruction (useful to run Logisim by command line with test programs)

--------------------------------------

dec, 4th:

-SHR (shift right) instruction (need one more signal in 		OK
 microcode store and an 8 bit tri-state buffer)

-------------------------------------

// to-do list (cs compiler) in order of priority:
// 30/10/2017

-subtraction operation			OK
-increment /decrement operation		OK
-refactor in validations
-out instruction				OK
-if
-for
-multiply/division operation
-string
-modulus (%)
-16/24 bit int / signed int / fixed point decimal
-arithmetic operation with literal operand
-comments



if(i > 5) {
	// do something
}




for(byte i=0; i<=10; i++) {
	// do something
}

// var def instr
// test instr
// inc instr
// loop var